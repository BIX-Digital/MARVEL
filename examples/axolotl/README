
This file contains the steps we took to assemble the axolotl genome.


##### READ PATCHING PHASE

### replace SERVER and PORT also in do_patching.py and do_assembly.py !!!

# create initial database
FA2db -v -x 2000 -b AXOLOTL -f axoFiles.txt

# split database into blocks
DBsplit AXOLOTL

# create dust track
DBdust AXOLOTL

# create daligner and merge plans, replace SERVER and PORT
HPCdaligner -v -t 100 -D SERVER:PORT -r1 -j16 --dal 32 --mrg 32 -o AXOLOTL AXOLOTL

# start dynamic repeat masking server on SERVER:PORT, replace PORT
DMserver -t 16 -p PORT -C AXOLOTL 40 AXOLOTL_CP

# run daligner to create initial overlaps
AXOLOTL.daligner.plan

# after all daligner jobs are finshied the dynamic repeat masker has to be shut down
DMctl -h HOST -p PORT shutdown

### run LAmerge to merge overlap blocks
AXOLOTL.merge.plan

# create quality and trim annotation (tracks) for each overlap block
for each database block
    LAq -b <block> AXOLOTL AXOLOTL.<block>.las

TKmerge -d AXOLOTL q
TKmerge -d AXOLOTL trim

# run LAfix to patch reads based on overlaps
for each database block
    LAfix -c -x 2000 AXOLOTL AXOLOTL.<block>.las AXOLOTL.<block>.fixed.fasta


##### ASSEMBLY PHASE

# create a new database with the fixed reads
FA2db -v -x 2000 -c AXOLOTL_FIX AXOLOTL.*.fixed.fasta

# split database into blocks
DBsplit AXOLOTL_FIX

# combine repeat tracks maskr and maskc that were created during read patching phase
TKcombine AXOLOTL_FIX mask maskr maskc

# create daligner and merge plans, replace SERVER and PORT
HPCdaligner -v -t 100 -D SERVER:PORT -m mask -r2 -j16 --dal 32 --mrg 32 -o AXOLOTL_FIX AXOLOTL_FIX

# start dynamic repeat masking server on SERVER:PORT, replace PORT
DMserver -t 16 -p PORT -C AXOLOTL_FIX 40 AXOLOTL_CP

### run daligner to create overlaps
AXOLOTL_FIX.dalign.plan

# after all daligner jobs are finshied the dynamic repeat masker has to be shut down
DMctl -h HOST -p PORT shutdown

### run LAmerge to merge overlap blocks
AXOLOTL_FIX.merge.plan

### start scrubbing pipeline

# repair alignments that prematurely stopped due to left-over errors in the reads
for each database block
    LAstitch -f 50 AXOLOTL_FIX AXOLOTL_FIX.<block>.las AXOLOTL_FIX.<block>.stitch.las

# create quality and trim annotation
for each database block
    LAq -T trim0 -s 5 -b <block> AXOLOTL_FIX AXOLOTL_FIX.<block>.stitch.las

TKmerge -d AXOLOTL_FIX q
TKmerge -d AXOLOTL_FIX trim0

# create a repeat annotation
for each database block
    LArepeat -c <coverage> -l 1.5 -h 2.0 -b <block> AXOLOTL_FIX AXOLOTL_FIX.<block>.stitch.las

TKmerge -d AXOLOTL_FIX repeats

# merge duplicate & overlapping annotation repeat annotation and masking server output
TKcombine {db} frepeats repeats maskc maskr

# remove gaps (ie. due to chimeric reads, ...)
for each database block
    LAgap -s 100 -t trim0 AXOLOTL_FIX AXOLOTL_FIX.<block>.stitch.las AXOLOTL_FIX.<block>.gap.las

# recalculate the trim track based on the cleaned up gaps
for each database block
    LAq -u -t trim0 -T trim1 -b <block> AXOLOTL_FIX AXOLOTL_FIX.<block>.gap.las

TKmerge -d AXOLOTL_FIX trim1

# filter repeat induced alignments and try to resolve repeat modules
for each database block
    LAfilter -p -s 100 -n 300 -r frepeats -t trim1 -o 1000 -u 0 AXOLOTL_FIX AXOLOTL_FIX.<block>.gap.las AXOLOTL_FIX.<block>.filtered.las

# not much is left now, so we can merge everything into a single las file
LAmerge -S filtered AXOLOTL_FIX AXOLOTL_FIX.filtered.las

# create overlap graph
mkdir -p components
OGbuild -t trim1 -s -c 1 AXOLOTL_FIX AXOLOTL_FIX.filtered.las components/AXOLOTL_FIX

# tour the overlap graph and create contigs paths
for each components/*.graphml
    OGtour.py -c AXOLOTL_FIX <component.graphml>

# create contig fasta files
for each components/*.paths
    tour2fasta.py -t trim1 AXOLOTL_FIX <component.graphml> <component.paths>
