
This file contains the steps we took to assemble the S.med genome.

For the full run scripts we used on our system a look at plan.SMED.tar.gz in the examples/plans directory.


##### READ PATCHING PHASE

# extract fasta sequences from h5 files
for x in m15*.bax.h5
do
   H5dextract -s p6_${x%bax.h5}stats -f ${x%bax.h5}fa -S b -x 4000 $x
done

# create initial databases
FA2db -v -x 4000 -b SMED *.fa

# split databases into blocks
DBsplit SMED

# create dust tracks
DBdust -b SMED

# create daligner and merge plans
HPCdaligner -v -t 100 -r1 -j16 --dal 32 --mrg 32 -b -o SMED SMED

# run the plans generated by HPCdaligner
SMED.dalign.plan
SMED.merge.plan

# compute quality and trim information for each block
for each database block
    LAq -b <block> SMED SMED.<block>.las

# merge quality and trim tracks
TKmerge -d SMED q
TKmerge -d SMED trim

for each SMED.[0..database blocks].las
    LAfix -x 4000 SMED SMED.<block>.las SMED.<block>.fixed.fasta

##### ASSEMBLY PHASE

# create a new Database of fixed reads
FA2db -v -x 4000 -c SMED_FIX SMED.*.fixed.fasta

# split database into blocks
DBsplit SMED_FIX

# create dust track
DBdust -p SMED_FIX

# create plans
HPCdaligner -v -t 100 -r1 -j16 --dal 32 --mrg 32 -b -o SMED_FIX SMED_FIX

# run the plans generated by HPCdaligner
SMED_FIX.dalign.plan
SMED_FIX.merge.plan

# repair alignments that prematurely stopped due to left-over errors in the reads
for each database block
    LAstitch -f 50 SMED_FIX SMED_FIX.<block>.las SMED_FIX.<block>.stitch.las

# compute quality and trim information for each block
for each database block
    LAq -b <block> SMED_FIX SMED_FIX.<block>.las

# merge quality and trim tracks
TKmerge -d SMED_FIX q
TKmerge -d SMED_FIX trim

# create the repeat annotion for each block
for each database block
    LArepeat -c <coverage> -l 1.5 -h 2.0 -b <block> SMED_FIX SMED_FIX.<block>.stitch.las

TKmerge -d SMED_FIX repeats

# homogenize repeat track
for each database block
    TKhomogenize -t trim0 -b <block> SMED_FIX SMED_FIX.<block>.stitch.las

# combine (remove duplicate and overlapping annotations)
TKcombine -d SMED_FIX hrepeats \\#.hrepeats
TKcombine SMED_FIX frepeats repeats hrepeats

# remove gaps (ie. due to chimeric reads, ...)
for each database block
    LAgap -s 300 -t trim0 SMED_FIX SMED_FIX.<block>.stitch.las SMED_FIX.<block>.gap.las

# recalculate the trim track based on the cleaned up gaps
for each database block
    LAq -u -t trim0 -T trim1 -b <block> SMED_FIX SMED_FIX.<block>.gap.las

TKmerge -d SMED_FIX trim1

# filter repeat induced alignments and try to resolve repeat modules
for each database block
    LAfilter -p -S 300 -MM <coverage> -n 300 -r frepeats -t trim1 -o 2000 -u 0 SMED_FIX SMED_FIX.<block>.gap.las SMED_FIX.<block>.filtered.las

# not much is left now, so we can merge everything into a single las file
LAmerge -S filtered SMED_FIX SMED_FIX.filtered.las

# create the overlap graph and split it into components
mkdir -p components
OGbuild -t trim1 -s SMED_FIX SMED_FIX.filtered.las components/SMED_FIX

# tour the components
for each components/*.graphml
    OGtour.py -c SMED_FIX <component.graphml>

# convert the tours to sequences
for each components/*.paths
    tour2fasta.py -t trim1 SMED_FIX <component.graphml> <components.paths>
